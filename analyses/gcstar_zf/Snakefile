
# Load useful vars
meta    = {"zf":["cpgplot", "cpgplot"]}
sp2ref = {"zf":"Taeniopygia_guttata"}
species = list(meta.keys())
spots   = ["hotspots"]
outgroup = "Anc0"
slop = 5e3
n_chunks = 500
og2hal = {}
halFile = "/moto/palab/users/md3914/Male_mutation_bias/ALIGNMENTS/363-avian-2020.hal"

# Branches
with open("misc_files/species_small.txt", "r") as fh:
    branches = [line.strip() for line in fh]

with open("misc_files/zf2zf.txt", "r") as fh:
    for line in fh:
        fields = line.split()
        og, og_l, chal, chal_l, offset = fields
        og2hal[og]    = ["", 0]
        og2hal[og][0] = chal
        og2hal[og][1] = 0

# Rules
rule all:
    input: 
        #expand("misc_files/{sp}.{spot}.bed", sp=species, spot=spots),
        #expand(["chunks/{{sp}}.{{spot}}.{}.bed".format(str(x+1).zfill(3)) for x in range(n_chunks)],sp=species, spot=spots),
        expand("results/{sp}.{spot}.{n}.parsimony.tab.gz", sp=species, spot=spots, n=[str(x+1).zfill(3) for x in range(n_chunks)])
        #expand("sub_types/subs/{branch}.{rep}.subtypes.txt", branch=branches, rep=range(20))

rule slop_spots:
    input: 
        "spots/{sp}.{spot}.bed"
    output: 
        "misc_files/{sp}.{spot}.bed"
    params:
        gdb = "gsizes/{sp}.genome",
        slop = int(slop),
        isl1 = lambda wcs: "cpgi/{}.{}.bed.gz".format(wcs.sp, meta[wcs.sp][0]),
        isl2 = lambda wcs: "cpgi/{}.{}.bed.gz".format(wcs.sp, meta[wcs.sp][1]),
        heats = lambda wcs: "spots/{}.heats.bed".format(wcs.sp)
    shell:
        "paste <(cut -f1-3 {input}) <(cut -f4 {params.heats}) " 
        "| awk -v s='{wildcards.sp}.{wildcards.spot}' '{{print $0\"\\t\"$1\":\"$2\"-\"$3\"\\t\"s}}' "
        "| bedtools sort -i - -g {params.gdb}"
        "| bedtools closest -a - -b <(bedtools sort -i {params.isl1} -g {params.gdb}) -d -t first -g {params.gdb} "
        "| bedtools closest -a - -b <(bedtools sort -i {params.isl2} -g {params.gdb}) -d -t first -g {params.gdb} "
        "| bedtools slop -i - -g {params.gdb} -b {params.slop} "
        "| python scripts/convert_zf_coordinates.py "
        "| python ~/bin/keep_only_dist.py -i 6 > {output}"        

rule divide_and_conquer:
    input: 
        "misc_files/{sp}.{spot}.bed"
    output: 
        chunks = ["chunks/{{sp}}.{{spot}}.{}.bed".format(str(x+1).zfill(3)) for x in range(n_chunks)]
    resources:
        time = 60*3,
        cpus = 1
    shell: 
        "split -n l/{n_chunks} -a 3 --numeric-suffixes=1 --additional-suffix=.bed {input} chunks/{wildcards.sp}.{wildcards.spot}."

rule gcstar_parsimony:
    input: 
        "chunks/{sp}.{spot}.{n}.bed"
    output: 
        "results/{sp}.{spot}.{n}.parsimony.tab.gz"
    params:
        halFile = halFile,
        ref = lambda wcs: sp2ref[wcs.sp]
    resources:
        time = 60*6,
        cpus = 1
    run:
        for spot_file in input:
            with open(spot_file, "r") as fh:
                for line in fh:
                    line = line.strip()
                    fields = line.split() 
                    scaf, start, end, heat, hid, nature, cpg1, cpg2 = fields
                    start = int(start)
                    end = int(end)
                    length = int(end) - int(start)                
                        
                    shell("cat misc_files/header_hal2maf.txt "
                           "<(hal2maf {params.halFile} /dev/stdout --refGenome {params.ref} "
                             "--refSequence {scaf} --onlyOrthologs --noDupes --start {start} --length {length}) "
                           "| python scripts/gc_star.py -c {scaf} -s {start} -e {end} -r {params.ref} "
                             "-d {cpg1},{cpg2} -m - -f misc_files/species_small.txt -n {nature} -l 0 -p 0 "
                             "| python ~/bin/add_comma_list_as_tabs.py -l {heat} | gzip >> {output}")

rule generate_random_beds_for_branches:
    input: 
        "gsizes/{branch}.genome"
    output: 
        "sub_types/beds/{branch}.{rep}.bed"
    shell: 
        "bedtools random -g {input} -n 1000 -l 10000 > {output}"

rule get_substitutions_for_branches:
    input: 
        "sub_types/beds/{branch}.{rep}.bed"
    output: 
        "sub_types/subs/{branch}.{rep}.subtypes.txt"
    shell: 
        "halBranchMutations {halFile} {wildcards.branch} --snpFile /dev/stdout "
        "--refTargets {input} | cut -f4 | sed 's/S_//g' | sort | uniq -c | column -t > {output}"
